// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FlowEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FlowEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FlowEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FlowEntity", id.toString(), this);
    }
  }

  static load(id: string): FlowEntity | null {
    return changetype<FlowEntity | null>(store.get("FlowEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get flowStatus(): i32 {
    let value = this.get("flowStatus");
    return value!.toI32();
  }

  set flowStatus(value: i32) {
    this.set("flowStatus", Value.fromI32(value));
  }

  get keepNetWork(): i32 {
    let value = this.get("keepNetWork");
    return value!.toI32();
  }

  set keepNetWork(value: i32) {
    this.set("keepNetWork", Value.fromI32(value));
  }

  get admin(): string {
    let value = this.get("admin");
    return value!.toString();
  }

  set admin(value: string) {
    this.set("admin", Value.fromString(value));
  }

  get lastKeeper(): string {
    let value = this.get("lastKeeper");
    return value!.toString();
  }

  set lastKeeper(value: string) {
    this.set("lastKeeper", Value.fromString(value));
  }

  get lastVersionflow(): string {
    let value = this.get("lastVersionflow");
    return value!.toString();
  }

  set lastVersionflow(value: string) {
    this.set("lastVersionflow", Value.fromString(value));
  }

  get lastExecNumber(): BigInt {
    let value = this.get("lastExecNumber");
    return value!.toBigInt();
  }

  set lastExecNumber(value: BigInt) {
    this.set("lastExecNumber", Value.fromBigInt(value));
  }

  get maxVaildBlockNumber(): BigInt {
    let value = this.get("maxVaildBlockNumber");
    return value!.toBigInt();
  }

  set maxVaildBlockNumber(value: BigInt) {
    this.set("maxVaildBlockNumber", Value.fromBigInt(value));
  }

  get flowName(): string | null {
    let value = this.get("flowName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set flowName(value: string | null) {
    if (!value) {
      this.unset("flowName");
    } else {
      this.set("flowName", Value.fromString(<string>value));
    }
  }

  get input(): Bytes | null {
    let value = this.get("input");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set input(value: Bytes | null) {
    if (!value) {
      this.unset("input");
    } else {
      this.set("input", Value.fromBytes(<Bytes>value));
    }
  }

  get details(): Array<string> {
    let value = this.get("details");
    return value!.toStringArray();
  }

  set details(value: Array<string>) {
    this.set("details", Value.fromStringArray(value));
  }
}

export class FlowHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FlowHistory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FlowHistory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FlowHistory", id.toString(), this);
    }
  }

  static load(id: string): FlowHistory | null {
    return changetype<FlowHistory | null>(store.get("FlowHistory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (!value) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(<BigInt>value));
    }
  }

  get blockTime(): BigInt | null {
    let value = this.get("blockTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockTime(value: BigInt | null) {
    if (!value) {
      this.unset("blockTime");
    } else {
      this.set("blockTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get action(): string | null {
    let value = this.get("action");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set action(value: string | null) {
    if (!value) {
      this.unset("action");
    } else {
      this.set("action", Value.fromString(<string>value));
    }
  }

  get from(): string | null {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set from(value: string | null) {
    if (!value) {
      this.unset("from");
    } else {
      this.set("from", Value.fromString(<string>value));
    }
  }
  
  get tx(): string | null {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tx(value: string | null) {
    if (!value) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromString(<string>value));
    }
  }

  get ethGasFee(): BigInt | null {
    let value = this.get("ethGasFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ethGasFee(value: BigInt | null) {
    if (!value) {
      this.unset("ethGasFee");
    } else {
      this.set("ethGasFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get evaGasFee(): BigInt | null {
    let value = this.get("evaGasFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set evaGasFee(value: BigInt | null) {
    if (!value) {
      this.unset("evaGasFee");
    } else {
      this.set("evaGasFee", Value.fromBigInt(<BigInt>value));
    }
  }
}
