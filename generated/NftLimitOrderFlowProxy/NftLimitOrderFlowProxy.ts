// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OrderCancel extends ethereum.Event {
  get params(): OrderCancel__Params {
    return new OrderCancel__Params(this);
  }
}

export class OrderCancel__Params {
  _event: OrderCancel;

  constructor(event: OrderCancel) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get orderId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get orderId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OrderExecute extends ethereum.Event {
  get params(): OrderExecute__Params {
    return new OrderExecute__Params(this);
  }
}

export class OrderExecute__Params {
  _event: OrderExecute;

  constructor(event: OrderExecute) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OrderPause extends ethereum.Event {
  get params(): OrderPause__Params {
    return new OrderPause__Params(this);
  }
}

export class OrderPause__Params {
  _event: OrderPause;

  constructor(event: OrderPause) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get orderId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OrderStart extends ethereum.Event {
  get params(): OrderStart__Params {
    return new OrderStart__Params(this);
  }
}

export class OrderStart__Params {
  _event: OrderStart;

  constructor(event: OrderStart) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get orderId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class NftLimitOrderFlowProxy__checkResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class NftLimitOrderFlowProxy__hashOrderInputOrderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get assetToken(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get expireTime(): BigInt {
    return this[4].toBigInt();
  }

  get tokenId(): BigInt {
    return this[5].toBigInt();
  }

  get salt(): BigInt {
    return this[6].toBigInt();
  }
}

export class NftLimitOrderFlowProxy__orderExistsResult {
  value0: i32;
  value1: Address;
  value2: BigInt;

  constructor(value0: i32, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class NftLimitOrderFlowProxy__verifyOrderInputOrderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get assetToken(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get expireTime(): BigInt {
    return this[4].toBigInt();
  }

  get tokenId(): BigInt {
    return this[5].toBigInt();
  }

  get salt(): BigInt {
    return this[6].toBigInt();
  }
}

export class NftLimitOrderFlowProxy extends ethereum.SmartContract {
  static bind(address: Address): NftLimitOrderFlowProxy {
    return new NftLimitOrderFlowProxy("NftLimitOrderFlowProxy", address);
  }

  check(checkData: Bytes): NftLimitOrderFlowProxy__checkResult {
    let result = super.call("check", "check(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(checkData)
    ]);

    return new NftLimitOrderFlowProxy__checkResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_check(
    checkData: Bytes
  ): ethereum.CallResult<NftLimitOrderFlowProxy__checkResult> {
    let result = super.tryCall("check", "check(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(checkData)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NftLimitOrderFlowProxy__checkResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  config(): Address {
    let result = super.call("config", "config():(address)", []);

    return result[0].toAddress();
  }

  try_config(): ethereum.CallResult<Address> {
    let result = super.tryCall("config", "config():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  evaSafesFactory(): Address {
    let result = super.call(
      "evaSafesFactory",
      "evaSafesFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_evaSafesFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "evaSafesFactory",
      "evaSafesFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hashOrder(order: NftLimitOrderFlowProxy__hashOrderInputOrderStruct): Bytes {
    let result = super.call(
      "hashOrder",
      "hashOrder((address,address,uint256,uint256,uint256,uint256,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(order)]
    );

    return result[0].toBytes();
  }

  try_hashOrder(
    order: NftLimitOrderFlowProxy__hashOrderInputOrderStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashOrder",
      "hashOrder((address,address,uint256,uint256,uint256,uint256,uint256)):(bytes32)",
      [ethereum.Value.fromTuple(order)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  orderExists(param0: Bytes): NftLimitOrderFlowProxy__orderExistsResult {
    let result = super.call(
      "orderExists",
      "orderExists(bytes32):(uint8,address,uint96)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new NftLimitOrderFlowProxy__orderExistsResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_orderExists(
    param0: Bytes
  ): ethereum.CallResult<NftLimitOrderFlowProxy__orderExistsResult> {
    let result = super.tryCall(
      "orderExists",
      "orderExists(bytes32):(uint8,address,uint96)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NftLimitOrderFlowProxy__orderExistsResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifyOrder(
    order: NftLimitOrderFlowProxy__verifyOrderInputOrderStruct,
    signature: Bytes
  ): boolean {
    let result = super.call(
      "verifyOrder",
      "verifyOrder((address,address,uint256,uint256,uint256,uint256,uint256),bytes):(bool)",
      [ethereum.Value.fromTuple(order), ethereum.Value.fromBytes(signature)]
    );

    return result[0].toBoolean();
  }

  try_verifyOrder(
    order: NftLimitOrderFlowProxy__verifyOrderInputOrderStruct,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyOrder",
      "verifyOrder((address,address,uint256,uint256,uint256,uint256,uint256),bytes):(bool)",
      [ethereum.Value.fromTuple(order), ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _config(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _evaSafesFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get version(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get orderId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get flowId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class ChangeStatusCall extends ethereum.Call {
  get inputs(): ChangeStatusCall__Inputs {
    return new ChangeStatusCall__Inputs(this);
  }

  get outputs(): ChangeStatusCall__Outputs {
    return new ChangeStatusCall__Outputs(this);
  }
}

export class ChangeStatusCall__Inputs {
  _call: ChangeStatusCall;

  constructor(call: ChangeStatusCall) {
    this._call = call;
  }

  get orderId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get pause(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get flowId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChangeStatusCall__Outputs {
  _call: ChangeStatusCall;

  constructor(call: ChangeStatusCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get ser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nftLimitOrder(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get network(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get gasFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get order(): CreateCallOrderStruct {
    return changetype<CreateCallOrderStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }
}

export class CreateCallOrderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get assetToken(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get expireTime(): BigInt {
    return this[4].toBigInt();
  }

  get tokenId(): BigInt {
    return this[5].toBigInt();
  }

  get salt(): BigInt {
    return this[6].toBigInt();
  }
}

export class CreateOrderCall extends ethereum.Call {
  get inputs(): CreateOrderCall__Inputs {
    return new CreateOrderCall__Inputs(this);
  }

  get outputs(): CreateOrderCall__Outputs {
    return new CreateOrderCall__Outputs(this);
  }
}

export class CreateOrderCall__Inputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get order(): CreateOrderCallOrderStruct {
    return changetype<CreateOrderCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get flowId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateOrderCall__Outputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get orderId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreateOrderCallOrderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get assetToken(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get expireTime(): BigInt {
    return this[4].toBigInt();
  }

  get tokenId(): BigInt {
    return this[5].toBigInt();
  }

  get salt(): BigInt {
    return this[6].toBigInt();
  }
}

export class DestroyFlowCall extends ethereum.Call {
  get inputs(): DestroyFlowCall__Inputs {
    return new DestroyFlowCall__Inputs(this);
  }

  get outputs(): DestroyFlowCall__Outputs {
    return new DestroyFlowCall__Outputs(this);
  }
}

export class DestroyFlowCall__Inputs {
  _call: DestroyFlowCall;

  constructor(call: DestroyFlowCall) {
    this._call = call;
  }

  get ser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DestroyFlowCall__Outputs {
  _call: DestroyFlowCall;

  constructor(call: DestroyFlowCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get executeData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get target(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get callData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }
}

export class PauseFlowCall extends ethereum.Call {
  get inputs(): PauseFlowCall__Inputs {
    return new PauseFlowCall__Inputs(this);
  }

  get outputs(): PauseFlowCall__Outputs {
    return new PauseFlowCall__Outputs(this);
  }
}

export class PauseFlowCall__Inputs {
  _call: PauseFlowCall;

  constructor(call: PauseFlowCall) {
    this._call = call;
  }

  get ser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PauseFlowCall__Outputs {
  _call: PauseFlowCall;

  constructor(call: PauseFlowCall) {
    this._call = call;
  }
}

export class SetFactoryCall extends ethereum.Call {
  get inputs(): SetFactoryCall__Inputs {
    return new SetFactoryCall__Inputs(this);
  }

  get outputs(): SetFactoryCall__Outputs {
    return new SetFactoryCall__Outputs(this);
  }
}

export class SetFactoryCall__Inputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }
}

export class SetFactoryCall__Outputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }
}

export class StartFlowCall extends ethereum.Call {
  get inputs(): StartFlowCall__Inputs {
    return new StartFlowCall__Inputs(this);
  }

  get outputs(): StartFlowCall__Outputs {
    return new StartFlowCall__Outputs(this);
  }
}

export class StartFlowCall__Inputs {
  _call: StartFlowCall;

  constructor(call: StartFlowCall) {
    this._call = call;
  }

  get ser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StartFlowCall__Outputs {
  _call: StartFlowCall;

  constructor(call: StartFlowCall) {
    this._call = call;
  }
}
