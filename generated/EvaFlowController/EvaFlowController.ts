// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FlowCreated extends ethereum.Event {
  get params(): FlowCreated__Params {
    return new FlowCreated__Params(this);
  }
}

export class FlowCreated__Params {
  _event: FlowCreated;

  constructor(event: FlowCreated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get flowAdd(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get checkData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FlowDestroyed extends ethereum.Event {
  get params(): FlowDestroyed__Params {
    return new FlowDestroyed__Params(this);
  }
}

export class FlowDestroyed__Params {
  _event: FlowDestroyed;

  constructor(event: FlowDestroyed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FlowExecuteFailed extends ethereum.Event {
  get params(): FlowExecuteFailed__Params {
    return new FlowExecuteFailed__Params(this);
  }
}

export class FlowExecuteFailed__Params {
  _event: FlowExecuteFailed;

  constructor(event: FlowExecuteFailed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payAmountByETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get payAmountByFeeToken(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get gasUsed(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class FlowExecuteSuccess extends ethereum.Event {
  get params(): FlowExecuteSuccess__Params {
    return new FlowExecuteSuccess__Params(this);
  }
}

export class FlowExecuteSuccess__Params {
  _event: FlowExecuteSuccess;

  constructor(event: FlowExecuteSuccess) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get payAmountByETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get payAmountByFeeToken(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get gasUsed(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class FlowPaused extends ethereum.Event {
  get params(): FlowPaused__Params {
    return new FlowPaused__Params(this);
  }
}

export class FlowPaused__Params {
  _event: FlowPaused;

  constructor(event: FlowPaused) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FlowStart extends ethereum.Event {
  get params(): FlowStart__Params {
    return new FlowStart__Params(this);
  }
}

export class FlowStart__Params {
  _event: FlowStart;

  constructor(event: FlowStart) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FlowUpdated extends ethereum.Event {
  get params(): FlowUpdated__Params {
    return new FlowUpdated__Params(this);
  }
}

export class FlowUpdated__Params {
  _event: FlowUpdated;

  constructor(event: FlowUpdated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get flowAdd(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetMinConfig extends ethereum.Event {
  get params(): SetMinConfig__Params {
    return new SetMinConfig__Params(this);
  }
}

export class SetMinConfig__Params {
  _event: SetMinConfig;

  constructor(event: SetMinConfig) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeRecived(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get feeToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get minGasFundForUser(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get minGasFundOneFlow(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get ppb(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get blockCountPerTurn(): i32 {
    return this._event.parameters[6].value.toI32();
  }
}

export class EvaFlowController__getFlowCheckInfoResult {
  value0: Address;
  value1: Bytes;

  constructor(value0: Address, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class EvaFlowController__getFlowMetasResultValue0Struct extends ethereum.Tuple {
  get flowStatus(): i32 {
    return this[0].toI32();
  }

  get keepNetWork(): i32 {
    return this[1].toI32();
  }

  get admin(): Address {
    return this[2].toAddress();
  }

  get lastKeeper(): Address {
    return this[3].toAddress();
  }

  get lastVersionflow(): Address {
    return this[4].toAddress();
  }

  get lastExecNumber(): BigInt {
    return this[5].toBigInt();
  }

  get maxVaildBlockNumber(): BigInt {
    return this[6].toBigInt();
  }

  get flowName(): string {
    return this[7].toString();
  }

  get checkData(): Bytes {
    return this[8].toBytes();
  }
}

export class EvaFlowController__minConfigResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }
}

export class EvaFlowController__userMetaMapResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;

  constructor(value0: BigInt, value1: BigInt, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }
}

export class EvaFlowController extends ethereum.SmartContract {
  static bind(address: Address): EvaFlowController {
    return new EvaFlowController("EvaFlowController", address);
  }

  MAX_INT(): BigInt {
    let result = super.call("MAX_INT", "MAX_INT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_INT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_INT", "MAX_INT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  config(): Address {
    let result = super.call("config", "config():(address)", []);

    return result[0].toAddress();
  }

  try_config(): ethereum.CallResult<Address> {
    let result = super.tryCall("config", "config():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  evaSafesFactory(): Address {
    let result = super.call(
      "evaSafesFactory",
      "evaSafesFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_evaSafesFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "evaSafesFactory",
      "evaSafesFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllVaildFlowSize(keepNetWork: i32): BigInt {
    let result = super.call(
      "getAllVaildFlowSize",
      "getAllVaildFlowSize(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(keepNetWork))]
    );

    return result[0].toBigInt();
  }

  try_getAllVaildFlowSize(keepNetWork: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAllVaildFlowSize",
      "getAllVaildFlowSize(uint8):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(keepNetWork))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFlowCheckInfo(flowId: BigInt): EvaFlowController__getFlowCheckInfoResult {
    let result = super.call(
      "getFlowCheckInfo",
      "getFlowCheckInfo(uint256):(address,bytes)",
      [ethereum.Value.fromUnsignedBigInt(flowId)]
    );

    return new EvaFlowController__getFlowCheckInfoResult(
      result[0].toAddress(),
      result[1].toBytes()
    );
  }

  try_getFlowCheckInfo(
    flowId: BigInt
  ): ethereum.CallResult<EvaFlowController__getFlowCheckInfoResult> {
    let result = super.tryCall(
      "getFlowCheckInfo",
      "getFlowCheckInfo(uint256):(address,bytes)",
      [ethereum.Value.fromUnsignedBigInt(flowId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EvaFlowController__getFlowCheckInfoResult(
        value[0].toAddress(),
        value[1].toBytes()
      )
    );
  }

  getFlowMetaSize(): BigInt {
    let result = super.call(
      "getFlowMetaSize",
      "getFlowMetaSize():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getFlowMetaSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFlowMetaSize",
      "getFlowMetaSize():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFlowMetas(
    index: BigInt
  ): EvaFlowController__getFlowMetasResultValue0Struct {
    let result = super.call(
      "getFlowMetas",
      "getFlowMetas(uint256):((uint8,uint8,address,address,address,uint256,uint256,string,bytes))",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return changetype<EvaFlowController__getFlowMetasResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getFlowMetas(
    index: BigInt
  ): ethereum.CallResult<EvaFlowController__getFlowMetasResultValue0Struct> {
    let result = super.tryCall(
      "getFlowMetas",
      "getFlowMetas(uint256):((uint8,uint8,address,address,address,uint256,uint256,string,bytes))",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<EvaFlowController__getFlowMetasResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getIndexVaildFlow(index: BigInt, keepNetWork: i32): BigInt {
    let result = super.call(
      "getIndexVaildFlow",
      "getIndexVaildFlow(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(keepNetWork))
      ]
    );

    return result[0].toBigInt();
  }

  try_getIndexVaildFlow(
    index: BigInt,
    keepNetWork: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIndexVaildFlow",
      "getIndexVaildFlow(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(keepNetWork))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSafes(user: Address): Address {
    let result = super.call("getSafes", "getSafes(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toAddress();
  }

  try_getSafes(user: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getSafes", "getSafes(address):(address)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVaildFlowRange(
    fromIndex: BigInt,
    endIndex: BigInt,
    keepNetWork: i32
  ): Array<BigInt> {
    let result = super.call(
      "getVaildFlowRange",
      "getVaildFlowRange(uint256,uint256,uint8):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(fromIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(keepNetWork))
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getVaildFlowRange(
    fromIndex: BigInt,
    endIndex: BigInt,
    keepNetWork: i32
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getVaildFlowRange",
      "getVaildFlowRange(uint256,uint256,uint8):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(fromIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(keepNetWork))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isValidFlow(flow: Address): boolean {
    let result = super.call("isValidFlow", "isValidFlow(address):(bool)", [
      ethereum.Value.fromAddress(flow)
    ]);

    return result[0].toBoolean();
  }

  try_isValidFlow(flow: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isValidFlow", "isValidFlow(address):(bool)", [
      ethereum.Value.fromAddress(flow)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minConfig(): EvaFlowController__minConfigResult {
    let result = super.call(
      "minConfig",
      "minConfig():(address,address,uint64,uint64,uint16,uint16)",
      []
    );

    return new EvaFlowController__minConfigResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toI32()
    );
  }

  try_minConfig(): ethereum.CallResult<EvaFlowController__minConfigResult> {
    let result = super.tryCall(
      "minConfig",
      "minConfig():(address,address,uint64,uint64,uint16,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EvaFlowController__minConfigResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toI32()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentEthAmount(): BigInt {
    let result = super.call(
      "paymentEthAmount",
      "paymentEthAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_paymentEthAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentEthAmount",
      "paymentEthAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentGasAmount(): BigInt {
    let result = super.call(
      "paymentGasAmount",
      "paymentGasAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_paymentGasAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentGasAmount",
      "paymentGasAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userMetaMap(param0: Address): EvaFlowController__userMetaMapResult {
    let result = super.call(
      "userMetaMap",
      "userMetaMap(address):(uint120,uint120,uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new EvaFlowController__userMetaMapResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32()
    );
  }

  try_userMetaMap(
    param0: Address
  ): ethereum.CallResult<EvaFlowController__userMetaMapResult> {
    let result = super.tryCall(
      "userMetaMap",
      "userMetaMap(address):(uint120,uint120,uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EvaFlowController__userMetaMapResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _config(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _evaSafesFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddFundByUserCall extends ethereum.Call {
  get inputs(): AddFundByUserCall__Inputs {
    return new AddFundByUserCall__Inputs(this);
  }

  get outputs(): AddFundByUserCall__Outputs {
    return new AddFundByUserCall__Outputs(this);
  }
}

export class AddFundByUserCall__Inputs {
  _call: AddFundByUserCall;

  constructor(call: AddFundByUserCall) {
    this._call = call;
  }

  get tokenAdress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get flowAdmin(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddFundByUserCall__Outputs {
  _call: AddFundByUserCall;

  constructor(call: AddFundByUserCall) {
    this._call = call;
  }
}

export class BatchExecFlowCall extends ethereum.Call {
  get inputs(): BatchExecFlowCall__Inputs {
    return new BatchExecFlowCall__Inputs(this);
  }

  get outputs(): BatchExecFlowCall__Outputs {
    return new BatchExecFlowCall__Outputs(this);
  }
}

export class BatchExecFlowCall__Inputs {
  _call: BatchExecFlowCall;

  constructor(call: BatchExecFlowCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get gasLimit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BatchExecFlowCall__Outputs {
  _call: BatchExecFlowCall;

  constructor(call: BatchExecFlowCall) {
    this._call = call;
  }
}

export class DestroyFlowCall extends ethereum.Call {
  get inputs(): DestroyFlowCall__Inputs {
    return new DestroyFlowCall__Inputs(this);
  }

  get outputs(): DestroyFlowCall__Outputs {
    return new DestroyFlowCall__Outputs(this);
  }
}

export class DestroyFlowCall__Inputs {
  _call: DestroyFlowCall;

  constructor(call: DestroyFlowCall) {
    this._call = call;
  }

  get _flowId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DestroyFlowCall__Outputs {
  _call: DestroyFlowCall;

  constructor(call: DestroyFlowCall) {
    this._call = call;
  }
}

export class ExecFlowCall extends ethereum.Call {
  get inputs(): ExecFlowCall__Inputs {
    return new ExecFlowCall__Inputs(this);
  }

  get outputs(): ExecFlowCall__Outputs {
    return new ExecFlowCall__Outputs(this);
  }
}

export class ExecFlowCall__Inputs {
  _call: ExecFlowCall;

  constructor(call: ExecFlowCall) {
    this._call = call;
  }

  get keeper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get execData(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ExecFlowCall__Outputs {
  _call: ExecFlowCall;

  constructor(call: ExecFlowCall) {
    this._call = call;
  }
}

export class PauseFlowCall extends ethereum.Call {
  get inputs(): PauseFlowCall__Inputs {
    return new PauseFlowCall__Inputs(this);
  }

  get outputs(): PauseFlowCall__Outputs {
    return new PauseFlowCall__Outputs(this);
  }
}

export class PauseFlowCall__Inputs {
  _call: PauseFlowCall;

  constructor(call: PauseFlowCall) {
    this._call = call;
  }

  get _flowId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PauseFlowCall__Outputs {
  _call: PauseFlowCall;

  constructor(call: PauseFlowCall) {
    this._call = call;
  }
}

export class RegisterFlowCall extends ethereum.Call {
  get inputs(): RegisterFlowCall__Inputs {
    return new RegisterFlowCall__Inputs(this);
  }

  get outputs(): RegisterFlowCall__Outputs {
    return new RegisterFlowCall__Outputs(this);
  }
}

export class RegisterFlowCall__Inputs {
  _call: RegisterFlowCall;

  constructor(call: RegisterFlowCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get network(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get flow(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get checkdata(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class RegisterFlowCall__Outputs {
  _call: RegisterFlowCall;

  constructor(call: RegisterFlowCall) {
    this._call = call;
  }

  get flowId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMinConfigCall extends ethereum.Call {
  get inputs(): SetMinConfigCall__Inputs {
    return new SetMinConfigCall__Inputs(this);
  }

  get outputs(): SetMinConfigCall__Outputs {
    return new SetMinConfigCall__Outputs(this);
  }
}

export class SetMinConfigCall__Inputs {
  _call: SetMinConfigCall;

  constructor(call: SetMinConfigCall) {
    this._call = call;
  }

  get _minConfig(): SetMinConfigCall_minConfigStruct {
    return changetype<SetMinConfigCall_minConfigStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetMinConfigCall__Outputs {
  _call: SetMinConfigCall;

  constructor(call: SetMinConfigCall) {
    this._call = call;
  }
}

export class SetMinConfigCall_minConfigStruct extends ethereum.Tuple {
  get feeRecived(): Address {
    return this[0].toAddress();
  }

  get feeToken(): Address {
    return this[1].toAddress();
  }

  get minGasFundForUser(): BigInt {
    return this[2].toBigInt();
  }

  get minGasFundOneFlow(): BigInt {
    return this[3].toBigInt();
  }

  get ppb(): i32 {
    return this[4].toI32();
  }

  get blockCountPerTurn(): i32 {
    return this[5].toI32();
  }
}

export class StartFlowCall extends ethereum.Call {
  get inputs(): StartFlowCall__Inputs {
    return new StartFlowCall__Inputs(this);
  }

  get outputs(): StartFlowCall__Outputs {
    return new StartFlowCall__Outputs(this);
  }
}

export class StartFlowCall__Inputs {
  _call: StartFlowCall;

  constructor(call: StartFlowCall) {
    this._call = call;
  }

  get _flowId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StartFlowCall__Outputs {
  _call: StartFlowCall;

  constructor(call: StartFlowCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFlowCall extends ethereum.Call {
  get inputs(): UpdateFlowCall__Inputs {
    return new UpdateFlowCall__Inputs(this);
  }

  get outputs(): UpdateFlowCall__Outputs {
    return new UpdateFlowCall__Outputs(this);
  }
}

export class UpdateFlowCall__Inputs {
  _call: UpdateFlowCall;

  constructor(call: UpdateFlowCall) {
    this._call = call;
  }

  get _flowId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _flowName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _flowCode(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UpdateFlowCall__Outputs {
  _call: UpdateFlowCall;

  constructor(call: UpdateFlowCall) {
    this._call = call;
  }
}

export class WithdrawFundByUserCall extends ethereum.Call {
  get inputs(): WithdrawFundByUserCall__Inputs {
    return new WithdrawFundByUserCall__Inputs(this);
  }

  get outputs(): WithdrawFundByUserCall__Outputs {
    return new WithdrawFundByUserCall__Outputs(this);
  }
}

export class WithdrawFundByUserCall__Inputs {
  _call: WithdrawFundByUserCall;

  constructor(call: WithdrawFundByUserCall) {
    this._call = call;
  }

  get tokenAdress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawFundByUserCall__Outputs {
  _call: WithdrawFundByUserCall;

  constructor(call: WithdrawFundByUserCall) {
    this._call = call;
  }
}

export class WithdrawPaymentCall extends ethereum.Call {
  get inputs(): WithdrawPaymentCall__Inputs {
    return new WithdrawPaymentCall__Inputs(this);
  }

  get outputs(): WithdrawPaymentCall__Outputs {
    return new WithdrawPaymentCall__Outputs(this);
  }
}

export class WithdrawPaymentCall__Inputs {
  _call: WithdrawPaymentCall;

  constructor(call: WithdrawPaymentCall) {
    this._call = call;
  }

  get tokenAdress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawPaymentCall__Outputs {
  _call: WithdrawPaymentCall;

  constructor(call: WithdrawPaymentCall) {
    this._call = call;
  }
}
