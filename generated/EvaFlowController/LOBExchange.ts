// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ConfigChanged extends ethereum.Event {
  get params(): ConfigChanged__Params {
    return new ConfigChanged__Params(this);
  }
}

export class ConfigChanged__Params {
  _event: ConfigChanged;

  constructor(event: ConfigChanged) {
    this._event = event;
  }

  get newConfig(): ConfigChangedNewConfigStruct {
    return changetype<ConfigChangedNewConfigStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class ConfigChangedNewConfigStruct extends ethereum.Tuple {
  get paused(): boolean {
    return this[0].toBoolean();
  }

  get basisPointsRate(): BigInt {
    return this[1].toBigInt();
  }

  get feeTo(): Address {
    return this[2].toAddress();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get orderId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get returnAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get orderId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OrderExecuted extends ethereum.Event {
  get params(): OrderExecuted__Params {
    return new OrderExecuted__Params(this);
  }
}

export class OrderExecuted__Params {
  _event: OrderExecuted;

  constructor(event: OrderExecuted) {
    this._event = event;
  }

  get orderId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get input(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get output(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StrategyChanged extends ethereum.Event {
  get params(): StrategyChanged__Params {
    return new StrategyChanged__Params(this);
  }
}

export class StrategyChanged__Params {
  _event: StrategyChanged;

  constructor(event: StrategyChanged) {
    this._event = event;
  }

  get newStrategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LOBExchange__checkResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }
}

export class LOBExchange__configResult {
  value0: boolean;
  value1: BigInt;
  value2: Address;

  constructor(value0: boolean, value1: BigInt, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }
}

export class LOBExchange__executeOrderResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LOBExchange__getFeeResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LOBExchange__getOrderInfoResultOrderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputAmount(): BigInt {
    return this[1].toBigInt();
  }

  get inputToken(): Address {
    return this[2].toAddress();
  }

  get minRate(): BigInt {
    return this[3].toBigInt();
  }

  get outputToken(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }

  get receiptor(): Address {
    return this[6].toAddress();
  }

  get minInputPer(): BigInt {
    return this[7].toBigInt();
  }
}

export class LOBExchange__getOrderInfoResultStatusStruct extends ethereum.Tuple {
  get balance(): BigInt {
    return this[0].toBigInt();
  }

  get paused(): boolean {
    return this[1].toBoolean();
  }
}

export class LOBExchange__getOrderInfoResult {
  value0: LOBExchange__getOrderInfoResultOrderStruct;
  value1: LOBExchange__getOrderInfoResultStatusStruct;

  constructor(
    value0: LOBExchange__getOrderInfoResultOrderStruct,
    value1: LOBExchange__getOrderInfoResultStatusStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }
}

export class LOBExchange__keyOfInputOStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputAmount(): BigInt {
    return this[1].toBigInt();
  }

  get inputToken(): Address {
    return this[2].toAddress();
  }

  get minRate(): BigInt {
    return this[3].toBigInt();
  }

  get outputToken(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }

  get receiptor(): Address {
    return this[6].toAddress();
  }

  get minInputPer(): BigInt {
    return this[7].toBigInt();
  }
}

export class LOBExchange extends ethereum.SmartContract {
  static bind(address: Address): LOBExchange {
    return new LOBExchange("LOBExchange", address);
  }

  check(orderIdData: Bytes): LOBExchange__checkResult {
    let result = super.call("check", "check(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(orderIdData)
    ]);

    return new LOBExchange__checkResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_check(orderIdData: Bytes): ethereum.CallResult<LOBExchange__checkResult> {
    let result = super.tryCall("check", "check(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(orderIdData)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LOBExchange__checkResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  config(): LOBExchange__configResult {
    let result = super.call("config", "config():(bool,uint64,address)", []);

    return new LOBExchange__configResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toAddress()
    );
  }

  try_config(): ethereum.CallResult<LOBExchange__configResult> {
    let result = super.tryCall("config", "config():(bool,uint64,address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LOBExchange__configResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toAddress()
      )
    );
  }

  execute(executeData: Bytes): boolean {
    let result = super.call("execute", "execute(bytes):(bool)", [
      ethereum.Value.fromBytes(executeData)
    ]);

    return result[0].toBoolean();
  }

  try_execute(executeData: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("execute", "execute(bytes):(bool)", [
      ethereum.Value.fromBytes(executeData)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  executeOrder(
    orderId: Bytes,
    strategy: Address,
    input: BigInt,
    data: Bytes
  ): LOBExchange__executeOrderResult {
    let result = super.call(
      "executeOrder",
      "executeOrder(bytes32,address,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(orderId),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(input),
        ethereum.Value.fromBytes(data)
      ]
    );

    return new LOBExchange__executeOrderResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_executeOrder(
    orderId: Bytes,
    strategy: Address,
    input: BigInt,
    data: Bytes
  ): ethereum.CallResult<LOBExchange__executeOrderResult> {
    let result = super.tryCall(
      "executeOrder",
      "executeOrder(bytes32,address,uint256,bytes):(uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(orderId),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(input),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LOBExchange__executeOrderResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getFee(amountIn: BigInt): LOBExchange__getFeeResult {
    let result = super.call("getFee", "getFee(uint96):(address,uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountIn)
    ]);

    return new LOBExchange__getFeeResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getFee(amountIn: BigInt): ethereum.CallResult<LOBExchange__getFeeResult> {
    let result = super.tryCall("getFee", "getFee(uint96):(address,uint256)", [
      ethereum.Value.fromUnsignedBigInt(amountIn)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LOBExchange__getFeeResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  getOrderInfo(orderId: Bytes): LOBExchange__getOrderInfoResult {
    let result = super.call(
      "getOrderInfo",
      "getOrderInfo(bytes32):((address,uint96,address,uint96,address,uint64,address,uint96),(uint96,bool))",
      [ethereum.Value.fromFixedBytes(orderId)]
    );

    return changetype<LOBExchange__getOrderInfoResult>(
      new LOBExchange__getOrderInfoResult(
        changetype<LOBExchange__getOrderInfoResultOrderStruct>(
          result[0].toTuple()
        ),
        changetype<LOBExchange__getOrderInfoResultStatusStruct>(
          result[1].toTuple()
        )
      )
    );
  }

  try_getOrderInfo(
    orderId: Bytes
  ): ethereum.CallResult<LOBExchange__getOrderInfoResult> {
    let result = super.tryCall(
      "getOrderInfo",
      "getOrderInfo(bytes32):((address,uint96,address,uint96,address,uint64,address,uint96),(uint96,bool))",
      [ethereum.Value.fromFixedBytes(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LOBExchange__getOrderInfoResult>(
        new LOBExchange__getOrderInfoResult(
          changetype<LOBExchange__getOrderInfoResultOrderStruct>(
            value[0].toTuple()
          ),
          changetype<LOBExchange__getOrderInfoResultStatusStruct>(
            value[1].toTuple()
          )
        )
      )
    );
  }

  isActiveOrder(orderId: Bytes): boolean {
    let result = super.call("isActiveOrder", "isActiveOrder(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(orderId)
    ]);

    return result[0].toBoolean();
  }

  try_isActiveOrder(orderId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isActiveOrder",
      "isActiveOrder(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(orderId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keyOf(o: LOBExchange__keyOfInputOStruct): Bytes {
    let result = super.call(
      "keyOf",
      "keyOf((address,uint96,address,uint96,address,uint64,address,uint96)):(bytes32)",
      [ethereum.Value.fromTuple(o)]
    );

    return result[0].toBytes();
  }

  try_keyOf(o: LOBExchange__keyOfInputOStruct): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "keyOf",
      "keyOf((address,uint96,address,uint96,address,uint64,address,uint96)):(bytes32)",
      [ethereum.Value.fromTuple(o)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  needClose(orderIdData: Bytes): boolean {
    let result = super.call("needClose", "needClose(bytes):(bool)", [
      ethereum.Value.fromBytes(orderIdData)
    ]);

    return result[0].toBoolean();
  }

  try_needClose(orderIdData: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("needClose", "needClose(bytes):(bool)", [
      ethereum.Value.fromBytes(orderIdData)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  orderExpired(orderId: Bytes): boolean {
    let result = super.call("orderExpired", "orderExpired(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(orderId)
    ]);

    return result[0].toBoolean();
  }

  try_orderExpired(orderId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("orderExpired", "orderExpired(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(orderId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  strategy(): Address {
    let result = super.call("strategy", "strategy():(address)", []);

    return result[0].toAddress();
  }

  try_strategy(): ethereum.CallResult<Address> {
    let result = super.tryCall("strategy", "strategy():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get strategy_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cfg(): ConstructorCallCfgStruct {
    return changetype<ConstructorCallCfgStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallCfgStruct extends ethereum.Tuple {
  get paused(): boolean {
    return this[0].toBoolean();
  }

  get basisPointsRate(): BigInt {
    return this[1].toBigInt();
  }

  get feeTo(): Address {
    return this[2].toAddress();
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get orderIdData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class CloseFlowCall extends ethereum.Call {
  get inputs(): CloseFlowCall__Inputs {
    return new CloseFlowCall__Inputs(this);
  }

  get outputs(): CloseFlowCall__Outputs {
    return new CloseFlowCall__Outputs(this);
  }
}

export class CloseFlowCall__Inputs {
  _call: CloseFlowCall;

  constructor(call: CloseFlowCall) {
    this._call = call;
  }

  get ser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get flowId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CloseFlowCall__Outputs {
  _call: CloseFlowCall;

  constructor(call: CloseFlowCall) {
    this._call = call;
  }
}

export class CloseOrderCall extends ethereum.Call {
  get inputs(): CloseOrderCall__Inputs {
    return new CloseOrderCall__Inputs(this);
  }

  get outputs(): CloseOrderCall__Outputs {
    return new CloseOrderCall__Outputs(this);
  }
}

export class CloseOrderCall__Inputs {
  _call: CloseOrderCall;

  constructor(call: CloseOrderCall) {
    this._call = call;
  }

  get orderId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CloseOrderCall__Outputs {
  _call: CloseOrderCall;

  constructor(call: CloseOrderCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get ser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exchange(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get network(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get gasFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[4].value.toString();
  }

  get order(): CreateCallOrderStruct {
    return changetype<CreateCallOrderStruct>(
      this._call.inputValues[5].value.toTuple()
    );
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }
}

export class CreateCallOrderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputAmount(): BigInt {
    return this[1].toBigInt();
  }

  get inputToken(): Address {
    return this[2].toAddress();
  }

  get minRate(): BigInt {
    return this[3].toBigInt();
  }

  get outputToken(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }

  get receiptor(): Address {
    return this[6].toAddress();
  }

  get minInputPer(): BigInt {
    return this[7].toBigInt();
  }
}

export class CreateOrderCall extends ethereum.Call {
  get inputs(): CreateOrderCall__Inputs {
    return new CreateOrderCall__Inputs(this);
  }

  get outputs(): CreateOrderCall__Outputs {
    return new CreateOrderCall__Outputs(this);
  }
}

export class CreateOrderCall__Inputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get order(): CreateOrderCallOrderStruct {
    return changetype<CreateOrderCallOrderStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateOrderCall__Outputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get orderId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreateOrderCallOrderStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get inputAmount(): BigInt {
    return this[1].toBigInt();
  }

  get inputToken(): Address {
    return this[2].toAddress();
  }

  get minRate(): BigInt {
    return this[3].toBigInt();
  }

  get outputToken(): Address {
    return this[4].toAddress();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }

  get receiptor(): Address {
    return this[6].toAddress();
  }

  get minInputPer(): BigInt {
    return this[7].toBigInt();
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get executeData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get canDestoryFlow(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ExecuteOrderCall extends ethereum.Call {
  get inputs(): ExecuteOrderCall__Inputs {
    return new ExecuteOrderCall__Inputs(this);
  }

  get outputs(): ExecuteOrderCall__Outputs {
    return new ExecuteOrderCall__Outputs(this);
  }
}

export class ExecuteOrderCall__Inputs {
  _call: ExecuteOrderCall;

  constructor(call: ExecuteOrderCall) {
    this._call = call;
  }

  get orderId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get strategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get input(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ExecuteOrderCall__Outputs {
  _call: ExecuteOrderCall;

  constructor(call: ExecuteOrderCall) {
    this._call = call;
  }

  get output(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get orderBalance(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get cfg(): SetConfigCallCfgStruct {
    return changetype<SetConfigCallCfgStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetConfigCallCfgStruct extends ethereum.Tuple {
  get paused(): boolean {
    return this[0].toBoolean();
  }

  get basisPointsRate(): BigInt {
    return this[1].toBigInt();
  }

  get feeTo(): Address {
    return this[2].toAddress();
  }
}

export class SetStrategyCall extends ethereum.Call {
  get inputs(): SetStrategyCall__Inputs {
    return new SetStrategyCall__Inputs(this);
  }

  get outputs(): SetStrategyCall__Outputs {
    return new SetStrategyCall__Outputs(this);
  }
}

export class SetStrategyCall__Inputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }

  get s(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStrategyCall__Outputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
